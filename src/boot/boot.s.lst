     1                                  ;; Boot sector
     2                                  ;; 512b
     3                                  [org 0x7c00]
     4                                  [bits 16]
     5                                  
     6                                  section .boot
     7                                  
     8                                  load_kernel:
     9 00000000 BF[0E01]                    mov di, string_loading_kernel
    10 00000003 E89700                      call print_str
    11                                  
    12                                      ; kernel should be on disk immediately after this boot sector, from 0x200 onwards
    13                                      ; we want to load this to memory address 0x10000
    14                                      
    15                                      load_chunk:
    16 00000006 B442                        mov ah, 42h ; Extended Read Sectors from Drive
    17 00000008 B280                        mov dl, 80h ; Load from first hard disk
    18 0000000A 31DB                        xor bx, bx
    19                                      ; specify ds:si for DAP
    20 0000000C 8ED9                        mov ds, cx
    21 0000000E BE[E000]                    mov si, disk_dap
    22 00000011 CD13                        int 13h
    23 00000013 727D                        jc disk_err
    24 00000015 A1[E600]                    mov ax, [disk_dap_segment]
    25 00000018 8B1E[E800]                  mov bx, [disk_dap_lba]
    26 0000001C 050010                      add ax, 0x1000 ; We should load 0x10000 bytes higher in memory
    27 0000001F 81C38000                    add bx, 0x80 ; 0x80 sectors
    28 00000023 A3[E600]                    mov [disk_dap_segment], ax
    29 00000026 891E[E800]                  mov [disk_dap_lba], bx
    30 0000002A 2D0020                      sub ax, 0x2000 ; If segment > 0x2000, stop
    31 0000002D 7C02                        jl load_kernel_done
    32 0000002F EBD5                        jmp load_chunk
    33                                      load_kernel_done:
    34                                  
    35 00000031 BF[9E01]                    mov di, string_disk_success
    36 00000034 E86600                      call print_str
    37                                  
    38                                  setup_gdt:
    39 00000037 BF[3201]                    mov di, string_setup_gdt
    40 0000003A E86000                      call print_str
    41 0000003D FA                          cli
    42                                      ; Setup GDT
    43 0000003E 6631C0                      xor eax, eax
    44 00000041 66B8[F6000000]              mov eax, gdt ; Get address of gdt
    45 00000047 66A3[F200]                  mov [gdtr + 2], eax ; Store in base
    46 0000004B 66B8[0E010000]              mov eax, gdt_end ; Get length of gdt
    47 00000051 662D[F6000000]              sub eax, gdt
    48 00000057 A3[F000]                    mov [gdtr], ax ; Store in limit
    49                                  
    50 0000005A 0F0116[F000]                lgdt [gdtr] ; Load the GDT record
    51                                  
    52                                  set_protected_mode:
    53 0000005F BF[4601]                    mov di, string_protected_mode
    54 00000062 E83800                      call print_str
    55                                      ; Set protected mode bit
    56 00000065 0F20C0                      mov eax, cr0
    57 00000068 6683C801                    or eax, 1
    58 0000006C 0F22C0                      mov cr0, eax
    59                                      ; We can't execute 32 bit code until we reload CS, which is done via a far jump
    60                                      ; We still need to move the kernel to the correct address, so we do that first
    61 0000006F EA[7400]0800                jmp 0x08:move_kernel
    62                                  
    63                                  [bits 32]
    64                                  ;; Now kernel is loaded at 0x10000-0x30000, we want to copy it to 0x100000
    65                                  move_kernel:
    66 00000074 BE00000100                  mov esi, 0x10000
    67 00000079 BF00001000                  mov edi, 0x100000
    68 0000007E B900800000                  mov ecx, 0x8000 ; 0x8000 double words = 0x20000 bytes
    69 00000083 66B81000                    mov ax, 0x10
    70 00000087 8EC0                        mov es, ax
    71 00000089 8ED8                        mov ds, ax
    72 0000008B F3A5                        rep movsd
    73                                  
    74                                  ; Now we finally jump to the kernel_init code!
    75                                  jump_kernel:
    76 0000008D E9(00001000)                jmp 0x100000 ; Jump using first GDT segment (offset 0x08), which is the kernel
    77                                  
    78                                  
    79                                  disk_err:
    80 00000092 66BF[7C01]                  mov di, string_disk_error
    81 00000096 E802000000                  call print_str
    82                                  disk_err_trap:
    83 0000009B EBFE                        jmp disk_err_trap
    84                                  
    85                                  
    86                                  [bits 16]
    87                                  ;; UTILITIES
    88                                  
    89                                  ;; print_str
    90                                  ;; args:
    91                                  ;;    ds - null terminated string segment 
    92                                  ;;    di - null terminated string address
    93                                  ;; uses the current cursor pos
    94                                  print_str:
    95 0000009D 50                          push ax
    96 0000009E 53                          push bx
    97 0000009F 51                          push cx
    98 000000A0 52                          push dx
    99                                      _print_char:
   100                                          ; get character
   101 000000A1 8B05                            mov ax, [di]
   102                                          ; if null terminator encountered, return
   103 000000A3 3C00                            cmp al, 0
   104 000000A5 7434                            je _null
   105 000000A7 3C0A                            cmp al, `\n` ; newline
   106 000000A9 7420                            je _handle_newline
   107                                          ; print char
   108 000000AB B40A                            mov ah, 0Ah
   109 000000AD B700                            mov bh, 0
   110 000000AF B90100                          mov cx, 1
   111 000000B2 CD10                            int 10h
   112                                      _set_cursor_pos:
   113                                          __get_pos:
   114 000000B4 B403                                mov ah, 03h
   115 000000B6 B700                                mov bh, 0
   116 000000B8 CD10                                int 10h ; now dl = current col
   117                                          __get_size:
   118 000000BA B40F                                mov ah, 0Fh
   119 000000BC CD10                                int 10h ; now ah = num cols
   120                                          __inc_col:
   121 000000BE FEC2                                inc dl
   122                                          __overflow_check:
   123 000000C0 38E2                                cmp dl, ah
   124 000000C2 7407                                je _handle_newline
   125                                          __set_pos:
   126 000000C4 B402                                mov ah, 02h ; set position
   127 000000C6 CD10                                int 10h
   128                                      _repeat:
   129                                          ; increment dx and repeat
   130 000000C8 47                              inc di
   131 000000C9 EBD6                            jmp _print_char
   132                                  
   133                                      ; special cases
   134                                      _handle_newline:
   135                                          ; get current pos
   136 000000CB B403                            mov ah, 03h
   137 000000CD B700                            mov bh, 0
   138 000000CF CD10                            int 10h
   139 000000D1 FEC6                            inc dh ; increment row
   140 000000D3 30D2                            xor dl, dl ; zero out column
   141 000000D5 B402                            mov ah, 02h ; set position
   142 000000D7 CD10                            int 10h
   143 000000D9 EBED                            jmp _repeat
   144                                      _null:
   145 000000DB 5A                              pop dx
   146 000000DC 59                              pop cx
   147 000000DD 5B                              pop bx
   148 000000DE 58                              pop ax
   149 000000DF C3                              ret
   150                                  
   151                                  ;; DAP for reading in kernel
   152                                  disk_dap:
   153 000000E0 10                          db 0x10 ; size of DAP
   154 000000E1 00                          db 0x00 ; reserved
   155 000000E2 8000                        dw 0x0080 ; number of sectors to read (512 bytes * 0x80 = 0x10000 bytes)
   156 000000E4 0000                        dw 0x0000 ; offset in segment to read to
   157                                  disk_dap_segment:
   158 000000E6 0010                        dw 0x1000 ; segment to read to (seg 0x1000 = byte 0x10000)
   159                                  disk_dap_lba:
   160 000000E8 0100000000000000            dq 0x0000000000000001 ; LBA of kernel on disk (second sector)
   161                                  
   162                                  ;; GDT Info
   163                                  gdtr:
   164 000000F0 0000                        dw 0 ; limit of GDT record
   165 000000F2 00000000                    dd 0 ; base of GDT record
   166                                  
   167                                  gdt:
   168                                      %include "src/boot/gdt.s"
   169                              <1> ;; Global Descriptor Table
   170                              <1> ;; Contains segment descriptors, which are data structures that specify the location, size,
   171                              <1> ;; and other information about memory segments. These can be accessed via jmp instructions, e.g.
   172                              <1> ;; jmp 0x08:0x1234, which will jump to offset 0x1234 within the region described by the first segment descriptor.
   173                              <1> 
   174                              <1> 
   175                              <1> ;; For simplicity, this uses a flat address space. Both code and data segments for the kernel cover Page 0 - Page 0x1FFFFF.
   176                              <1> 
   177                              <1> ;; Null descriptor
   178                              <1> entry_null:
   179 000000F6 00<rep 8h>          <1>     times 8 db 0 ; 8 null bytes
   180                              <1> entry_1: ; Kernel code segment
   181 000000FE FFFF                <1>     _1_limit_low   dw 0xFFFF    ; Limit - maximum addressable unit, this leaves 64KiB for kernel code
   182 00000100 0000                <1>     _1_base_low    dw 0x0000    ; LSBs of base address
   183 00000102 00                  <1>     _1_base_mid    db 0x00      ; Next MSB of base
   184 00000103 9A                  <1>     _1_access      db 10011010b ; Present, Privilege (00 - Kernel), Descriptor Type (1 - Code/Data), Executable (1), Conforming (0), Readable (1), Accessed (1)
   185 00000104 DF                  <1>     _1_flags_limit db 11011111b ; First 3 bits are flags (Granularity: Page, Size: 32bit, Long mode: No), rest are MSBs of limit
   186 00000105 00                  <1>     _1_base_high   db 0x00      ; MSB of base
   187                              <1> entry_2: ; Kernel data segment
   188 00000106 FFFF                <1>     _2_limit_low   dw 0xFFFF    ; Limit - maximum addressable unit
   189 00000108 0000                <1>     _2_base_low    dw 0x0000    ; LSBs of base address
   190 0000010A 00                  <1>     _2_base_mid    db 0x00      ; Next MSB of base
   191 0000010B 92                  <1>     _2_access      db 10010010b ; Present, Privilege (00 - Kernel), Descriptor Type (1 - Code/Data), Executable (0), Conforming (0), Readable (1), Accessed (1)
   192 0000010C DF                  <1>     _2_flags_limit db 11011111b ; First 3 bits are flags (Granularity: Page, Size: 32bit, Long mode: No), rest are MSBs of limit
   193 0000010D 00                  <1>     _2_base_high   db 0x00      ; MSB of base
   169                                  gdt_end:
   170                                  
   171                                  string_loading_kernel:
   172 0000010E 4C6F6164696E67206B-         dw `Loading kernel from disk image...\n`, 0
   172 00000117 65726E656C2066726F-
   172 00000120 6D206469736B20696D-
   172 00000129 6167652E2E2E0A0000 
   173                                  string_setup_gdt:
   174 00000132 53657474696E672075-         dw `Setting up GDT...\n`, 0
   174 0000013B 70204744542E2E2E0A-
   174 00000144 0000               
   175                                  string_protected_mode:
   176 00000146 5475726E696E67206F-         dw `Turning on protected mode and jumping to kernel...\n`, 0
   176 0000014F 6E2070726F74656374-
   176 00000158 6564206D6F64652061-
   176 00000161 6E64206A756D70696E-
   176 0000016A 6720746F206B65726E-
   176 00000173 656C2E2E2E0A000000 
   177                                  string_disk_error:
   178 0000017C 4572726F7220726561-         dw `Error reading kernel from disk.\n`, 0
   178 00000185 64696E67206B65726E-
   178 0000018E 656C2066726F6D2064-
   178 00000197 69736B2E0A0000     
   179                                  string_disk_success:
   180 0000019E 52656164206B65726E-         dw `Read kernel from disk successfully.\n`, 0
   180 000001A7 656C2066726F6D2064-
   180 000001B0 69736B207375636365-
   180 000001B9 737366756C6C792E0A-
   180 000001C2 0000               
   181                                  
   182                                  ; times (0x1B8 - ($ - $$)) nop
   183                                  ;     dd 0x42424242 ;; Disk signature
   184                                  ;     dw 0x0000
   185                                  ; times (0x1BE - ($ - $$)) nop
   186                                  ; partition_entry_1: ;; KERNEL IMAGE PARTITION
   187                                  ;     db 0x80 ; Primary disk
   188                                      
   189                                  ;     ;; Start of partition
   190                                  ;     db 0x00 ; Head 0
   191                                  ;     db 0b00000010 ; Sector 2 (1-indexed)
   192                                  ;     db 0x00 ; Cylinder 0
   193                                  ;     db 0x7F ; partition type (must be non-zero)
   194                                      
   195                                  ;     ;; End of partition    
   196                                  ;     ;; We copied 0x80 sectors, so 0x81 is the last sector
   197                                  ;     db 0x02 ; Head 2
   198                                  ;     db 0x03 ; Sector 3 (1-indexed)
   199                                  ;     db 0x00 ; Cylinder 0
   200                                  
   201                                  ;     dd 0x01  ; LBA of start of partition (Sector 1, zero indexed)
   202                                  ;     dd 0x80  ; Sectors in partition
   203                                  ; partition_entry_2: ;; RESERVED FOR FILESYSTEM EXPERIMENTATION
   204                                  ;     db 0x80 ; Primary disk
   205                                  
   206                                  ;     ;; Start of partition - LBA 0x81
   207                                  ;     db 0x02 ; Head 2
   208                                  ;     db 0x04 ; Sector 4 (1-indexed)
   209                                  ;     db 0x00 ; Cylinder 0
   210                                  ;     db 0x01 ; partition type (FAT12)
   211                                      
   212                                  ;     ;; End of partition - LBA 0x882    
   213                                  ;     db 0x02 ; Head 2
   214                                  ;     db 0x25 ; Sector 37 (1-indexed)
   215                                  ;     db 0x02 ; Cylinder 2
   216                                  ;     dd 0x81  ; LBA of start of partition (Sector 1, zero indexed)
   217                                  ;     dd 0x800  ; Sectors in partition
   218                                      
   219 000001C4 00<rep 3Ah>             times (0x1FE - ($ - $$)) db 0x00 ;; pad for boot signature
   220                                  bootsig:
   221 000001FE 55AA                        dw 0xAA55 ; Boot signature
